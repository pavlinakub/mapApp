{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CircleMarkerService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = 'http://localhost:11111/route';\n  }\n  static scaledRadius(val, maxVal) {\n    return 20 * (val / maxVal);\n  }\n  makeRouteCircleMarkers(map) {\n    const layer = L.layerGroup(); // Create a layer group to hold the markers\n    this.http.get(this.baseURL).subscribe(res => {\n      for (const t of res) {\n        const lon = t.routeSouradniceS;\n        const lat = t.routeSouradniceN;\n        const popupContent = this.getPopupContent(t.routTime);\n        const circle = L.circleMarker([lat, lon]);\n        circle.bindPopup(popupContent).addTo(layer);\n      }\n      // Once all markers are added, return the layer group\n      // Note: The return statement should be outside the subscribe callback\n      // to ensure it returns the layer group after the HTTP request completes.\n    });\n    // Return an empty layer group as a fallback (in case the HTTP request hasn't completed yet)\n    return layer;\n  }\n  getPopupContent(time) {\n    this.http.get('http://localhost:11111/log').subscribe(logs => {\n      const log = logs.find(log => time.getMinutes() === log.logTime.getMinutes());\n      if (log) {\n        return log.rssi.toString();\n      }\n      return 'Not known';\n    });\n    return 'Not known';\n  }\n}\nCircleMarkerService.ɵfac = function CircleMarkerService_Factory(t) {\n  return new (t || CircleMarkerService)(i0.ɵɵinject(i1.HttpClient));\n};\nCircleMarkerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CircleMarkerService,\n  factory: CircleMarkerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","CircleMarkerService","constructor","http","baseURL","scaledRadius","val","maxVal","makeRouteCircleMarkers","map","layer","layerGroup","get","subscribe","res","t","lon","routeSouradniceS","lat","routeSouradniceN","popupContent","getPopupContent","routTime","circle","circleMarker","bindPopup","addTo","time","logs","log","find","getMinutes","logTime","rssi","toString","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\circleMarkers.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { Route } from 'src/Route';\r\nimport { Log } from 'src/Log';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CircleMarkerService {\r\n  private baseURL = 'http://localhost:11111/route';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  static scaledRadius(val: number, maxVal: number): number {\r\n    return 20 * (val / maxVal);\r\n  }\r\n\r\n  makeRouteCircleMarkers(map: L.Map): L.LayerGroup {\r\n    const layer = L.layerGroup(); // Create a layer group to hold the markers\r\n\r\n    this.http.get<Route[]>(this.baseURL).subscribe((res: Route[]) => {\r\n      for (const t of res) {\r\n        const lon = t.routeSouradniceS;\r\n        const lat = t.routeSouradniceN;\r\n        const popupContent = this.getPopupContent(t.routTime);\r\n        const circle = L.circleMarker([lat, lon]);\r\n        circle.bindPopup(popupContent).addTo(layer);\r\n      }\r\n\r\n      // Once all markers are added, return the layer group\r\n      // Note: The return statement should be outside the subscribe callback\r\n      // to ensure it returns the layer group after the HTTP request completes.\r\n    });\r\n\r\n    // Return an empty layer group as a fallback (in case the HTTP request hasn't completed yet)\r\n    return layer;\r\n  }\r\n\r\n  getPopupContent(time: Date): string {\r\n    this.http.get<Log[]>('http://localhost:11111/log').subscribe((logs: Log[]) => {\r\n      const log = logs.find((log) => time.getMinutes() === log.logTime.getMinutes());\r\n      if (log) {\r\n        return log.rssi.toString();\r\n      }\r\n      return 'Not known'\r\n    });\r\n\r\n    return 'Not known';\r\n  }\r\n}\r\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAO5B,OAAM,MAAOC,mBAAmB;EAG9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,8BAA8B;EAET;EAEvC,OAAOC,YAAYA,CAACC,GAAW,EAAEC,MAAc;IAC7C,OAAO,EAAE,IAAID,GAAG,GAAGC,MAAM,CAAC;EAC5B;EAEAC,sBAAsBA,CAACC,GAAU;IAC/B,MAAMC,KAAK,GAAGV,CAAC,CAACW,UAAU,EAAE,CAAC,CAAC;IAE9B,IAAI,CAACR,IAAI,CAACS,GAAG,CAAU,IAAI,CAACR,OAAO,CAAC,CAACS,SAAS,CAAEC,GAAY,IAAI;MAC9D,KAAK,MAAMC,CAAC,IAAID,GAAG,EAAE;QACnB,MAAME,GAAG,GAAGD,CAAC,CAACE,gBAAgB;QAC9B,MAAMC,GAAG,GAAGH,CAAC,CAACI,gBAAgB;QAC9B,MAAMC,YAAY,GAAG,IAAI,CAACC,eAAe,CAACN,CAAC,CAACO,QAAQ,CAAC;QACrD,MAAMC,MAAM,GAAGvB,CAAC,CAACwB,YAAY,CAAC,CAACN,GAAG,EAAEF,GAAG,CAAC,CAAC;QACzCO,MAAM,CAACE,SAAS,CAACL,YAAY,CAAC,CAACM,KAAK,CAAChB,KAAK,CAAC;;MAG7C;MACA;MACA;IACF,CAAC,CAAC;IAEF;IACA,OAAOA,KAAK;EACd;EAEAW,eAAeA,CAACM,IAAU;IACxB,IAAI,CAACxB,IAAI,CAACS,GAAG,CAAQ,4BAA4B,CAAC,CAACC,SAAS,CAAEe,IAAW,IAAI;MAC3E,MAAMC,GAAG,GAAGD,IAAI,CAACE,IAAI,CAAED,GAAG,IAAKF,IAAI,CAACI,UAAU,EAAE,KAAKF,GAAG,CAACG,OAAO,CAACD,UAAU,EAAE,CAAC;MAC9E,IAAIF,GAAG,EAAE;QACP,OAAOA,GAAG,CAACI,IAAI,CAACC,QAAQ,EAAE;;MAE5B,OAAO,WAAW;IACpB,CAAC,CAAC;IAEF,OAAO,WAAW;EACpB;;AAxCWjC,mBAAmB,C;mBAAnBA,mBAAmB,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnBrC,mBAAmB,C;SAAnBA,mBAAmB;EAAAsC,OAAA,EAAnBtC,mBAAmB,CAAAuC,IAAA;EAAAC,UAAA,EAFlB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}