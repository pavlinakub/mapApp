{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolylineService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/routedata\";\n  }\n  makeRoutePolyline(map) {\n    const layer = L.layerGroup(); // Create a layer group to hold the polylines\n    this.http.get(this.baseURL).subscribe(data => {\n      const path = [];\n      for (const d of data) {\n        const lon = d.routeSouradniceS;\n        const lat = d.routeSouradniceN;\n        const color = d.rColor;\n        path.push([lat, lon]);\n      }\n      // Create polyline segments with colors based on transmitter ID\n      for (let i = 0; i < path.length - 1; i++) {\n        const segment = [path[i], path[i + 1]];\n        const colorR = data[i].rColor.toString();\n        const polyline = L.polyline(segment, {\n          color: colorR\n        });\n        polyline.addTo(layer);\n      }\n    });\n    return layer;\n  }\n}\nPolylineService.ɵfac = function PolylineService_Factory(t) {\n  return new (t || PolylineService)(i0.ɵɵinject(i1.HttpClient));\n};\nPolylineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PolylineService,\n  factory: PolylineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","PolylineService","constructor","http","baseURL","makeRoutePolyline","map","layer","layerGroup","get","subscribe","data","path","d","lon","routeSouradniceS","lat","routeSouradniceN","color","rColor","push","i","length","segment","colorR","toString","polyline","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\polyline.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { RouteTransmitter } from 'src/model/RouteTransmitter';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolylineService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/routedata\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\n\r\nmakeRoutePolyline(map: L.Map): L.LayerGroup {\r\n  const layer = L.layerGroup(); // Create a layer group to hold the polylines\r\n\r\n  this.http.get<RouteTransmitter[]>(this.baseURL ).subscribe((data: RouteTransmitter[]) => {\r\n   \r\n      const path: L.LatLngTuple[] = [];\r\n      \r\n      for (const d of data) {\r\n          const lon = d.routeSouradniceS;\r\n          const lat = d.routeSouradniceN;\r\n          const color=d.rColor\r\n          path.push([lat, lon]);\r\n        }\r\n      \r\n      \r\n\r\n      // Create polyline segments with colors based on transmitter ID\r\n      for (let i = 0; i < path.length - 1; i++) {\r\n        const segment = [path[i], path[i + 1]];\r\n        const colorR = data[i].rColor.toString();\r\n        const polyline = L.polyline(segment, { color:colorR });\r\n        polyline.addTo(layer);   \r\n      }\r\n    });\r\n  \r\n\r\n  \r\n  return layer;\r\n}\r\n}\r\n\r\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAM5B,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,kCAAkC;EAEtD;EAGAC,iBAAiBA,CAACC,GAAU;IAC1B,MAAMC,KAAK,GAAGP,CAAC,CAACQ,UAAU,EAAE,CAAC,CAAC;IAE9B,IAAI,CAACL,IAAI,CAACM,GAAG,CAAqB,IAAI,CAACL,OAAO,CAAE,CAACM,SAAS,CAAEC,IAAwB,IAAI;MAEpF,MAAMC,IAAI,GAAoB,EAAE;MAEhC,KAAK,MAAMC,CAAC,IAAIF,IAAI,EAAE;QAClB,MAAMG,GAAG,GAAGD,CAAC,CAACE,gBAAgB;QAC9B,MAAMC,GAAG,GAAGH,CAAC,CAACI,gBAAgB;QAC9B,MAAMC,KAAK,GAACL,CAAC,CAACM,MAAM;QACpBP,IAAI,CAACQ,IAAI,CAAC,CAACJ,GAAG,EAAEF,GAAG,CAAC,CAAC;;MAKzB;MACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,IAAI,CAACU,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;QACxC,MAAME,OAAO,GAAG,CAACX,IAAI,CAACS,CAAC,CAAC,EAAET,IAAI,CAACS,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,MAAMG,MAAM,GAAGb,IAAI,CAACU,CAAC,CAAC,CAACF,MAAM,CAACM,QAAQ,EAAE;QACxC,MAAMC,QAAQ,GAAG1B,CAAC,CAAC0B,QAAQ,CAACH,OAAO,EAAE;UAAEL,KAAK,EAACM;QAAM,CAAE,CAAC;QACtDE,QAAQ,CAACC,KAAK,CAACpB,KAAK,CAAC;;IAEzB,CAAC,CAAC;IAIJ,OAAOA,KAAK;EACd;;AApCaN,eAAe,C;mBAAfA,eAAe,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAf9B,eAAe,C;SAAfA,eAAe;EAAA+B,OAAA,EAAf/B,eAAe,CAAAgC,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}