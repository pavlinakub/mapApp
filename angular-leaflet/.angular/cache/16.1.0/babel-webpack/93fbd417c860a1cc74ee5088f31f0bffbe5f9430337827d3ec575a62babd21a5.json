{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClickService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111\";\n  }\n  makeRouteMarkers(map) {\n    const layer = L.layerGroup(); // Create a layer group to hold the markers\n    this.http.get(this.baseURL).subscribe(res => {\n      for (const t of res) {\n        const lon = t.routeSouradniceS;\n        const lat = t.routeSouradniceN;\n        // const popupContent = this.getPopupContent(t.routTime);\n        const marker = L.marker([lat, lon]).addTo(layer);\n      }\n      // Once all markers are added, return the layer group\n      return layer;\n    });\n    // Return an empty layer group as a fallback (in case the HTTP request hasn't completed yet)\n    return layer;\n  }\n  getPopupContent(time) {\n    var log;\n    if (time.getMinutes() == log.logTime.getMinutes()) {\n      return log.rssi.toString();\n    }\n    return \"Not known\";\n  }\n}\nClickService.ɵfac = function ClickService_Factory(t) {\n  return new (t || ClickService)(i0.ɵɵinject(i1.HttpClient));\n};\nClickService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClickService,\n  factory: ClickService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","ClickService","constructor","http","baseURL","makeRouteMarkers","map","layer","layerGroup","get","subscribe","res","t","lon","routeSouradniceS","lat","routeSouradniceN","marker","addTo","getPopupContent","time","log","getMinutes","logTime","rssi","toString","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\click.service.ts"],"sourcesContent":["import * as L from 'leaflet';\r\nimport { Transmitter } from 'src/Transmitter';\r\nimport { Route } from 'src/Route';\r\nimport { LatLngExpression } from 'leaflet';\r\nimport { MarkerService } from '../marker.service';\r\nimport { Observable } from 'rxjs';\r\nimport { Log } from 'src/Log';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ClickService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\n \r\n  makeRouteMarkers(map: L.Map): L.LayerGroup {\r\n    const layer = L.layerGroup(); // Create a layer group to hold the markers\r\n  \r\n    this.http.get<Route[]>(this.baseURL).subscribe((res: Route[]) => {\r\n      for (const t of res) {\r\n        const lon = t.routeSouradniceS;\r\n        const lat = t.routeSouradniceN;\r\n       // const popupContent = this.getPopupContent(t.routTime);\r\n        \r\n        const marker = L.marker([lat, lon]).addTo(layer);\r\n     \r\n      \r\n      }\r\n  \r\n      // Once all markers are added, return the layer group\r\n      return layer;\r\n    });\r\n  \r\n    // Return an empty layer group as a fallback (in case the HTTP request hasn't completed yet)\r\n    return layer;\r\n  }\r\ngetPopupContent(time:Date) :string{\r\n  var log!: Log\r\n    if(time.getMinutes()==log.logTime.getMinutes()){\r\n      return log.rssi.toString()}\r\n      return \"Not known\"\r\n}\r\n  }\r\n\r\n  \r\n  \r\n  "],"mappings":"AAAA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAa5B,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,wBAAwB;EAE5C;EAGEC,gBAAgBA,CAACC,GAAU;IACzB,MAAMC,KAAK,GAAGP,CAAC,CAACQ,UAAU,EAAE,CAAC,CAAC;IAE9B,IAAI,CAACL,IAAI,CAACM,GAAG,CAAU,IAAI,CAACL,OAAO,CAAC,CAACM,SAAS,CAAEC,GAAY,IAAI;MAC9D,KAAK,MAAMC,CAAC,IAAID,GAAG,EAAE;QACnB,MAAME,GAAG,GAAGD,CAAC,CAACE,gBAAgB;QAC9B,MAAMC,GAAG,GAAGH,CAAC,CAACI,gBAAgB;QAC/B;QAEC,MAAMC,MAAM,GAAGjB,CAAC,CAACiB,MAAM,CAAC,CAACF,GAAG,EAAEF,GAAG,CAAC,CAAC,CAACK,KAAK,CAACX,KAAK,CAAC;;MAKlD;MACA,OAAOA,KAAK;IACd,CAAC,CAAC;IAEF;IACA,OAAOA,KAAK;EACd;EACFY,eAAeA,CAACC,IAAS;IACvB,IAAIC,GAAS;IACX,IAAGD,IAAI,CAACE,UAAU,EAAE,IAAED,GAAG,CAACE,OAAO,CAACD,UAAU,EAAE,EAAC;MAC7C,OAAOD,GAAG,CAACG,IAAI,CAACC,QAAQ,EAAE;;IAC1B,OAAO,WAAW;EACxB;;AAlCaxB,YAAY,C;mBAAZA,YAAY,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZ5B,YAAY,C;SAAZA,YAAY;EAAA6B,OAAA,EAAZ7B,YAAY,CAAA8B,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}