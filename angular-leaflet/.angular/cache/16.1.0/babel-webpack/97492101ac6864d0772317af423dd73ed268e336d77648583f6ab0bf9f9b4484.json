{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolylineService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/route\";\n  }\n  makeRoutePolyline(map) {\n    this.http.get(this.baseURL).subscribe(res => {\n      for (const route of res) {\n        const path = [];\n        const transmitterId = route.transmitterId; // Assuming the foreign key column name is 'transmitterId'\n        for (const point of res) {\n          const lon = point.routeSouradniceS;\n          const lat = point.routeSouradniceN;\n          path.push([lat, lon]);\n        }\n        this.http.get(`/transmitters/${transmitterId}`).subscribe(transmitter => {\n          const color = transmitter.routeColor;\n          const polyline = L.polyline(path, {\n            color\n          }).addTo(map);\n        });\n      }\n    });\n  }\n}\nPolylineService.ɵfac = function PolylineService_Factory(t) {\n  return new (t || PolylineService)(i0.ɵɵinject(i1.HttpClient));\n};\nPolylineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PolylineService,\n  factory: PolylineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","PolylineService","constructor","http","baseURL","makeRoutePolyline","map","get","subscribe","res","route","path","transmitterId","point","lon","routeSouradniceS","lat","routeSouradniceN","push","transmitter","color","routeColor","polyline","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\polyline.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { Transmitter } from 'src/Transmitter';\r\nimport { Route } from 'src/Route';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolylineService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/route\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\n\r\n\r\nmakeRoutePolyline(map: L.Map): void {\r\n  this.http.get<Route[]>(this.baseURL).subscribe((res: Route[]) => {\r\n    for (const route of res) {\r\n      const path: any[] = [];\r\n      const transmitterId = route.transmitterId; // Assuming the foreign key column name is 'transmitterId'\r\n\r\n      for (const point of res) {\r\n        const lon = point.routeSouradniceS;\r\n        const lat = point.routeSouradniceN;\r\n        path.push([lat, lon]);\r\n      }\r\n\r\n      this.http.get<Transmitter>(`/transmitters/${transmitterId}`).subscribe((transmitter: Transmitter) => {\r\n        const color = transmitter.routeColor;\r\n        const polyline = L.polyline(path, { color }).addTo(map);\r\n      });\r\n    }\r\n  });\r\n}\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAO5B,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,8BAA8B;EAElD;EAIAC,iBAAiBA,CAACC,GAAU;IAC1B,IAAI,CAACH,IAAI,CAACI,GAAG,CAAU,IAAI,CAACH,OAAO,CAAC,CAACI,SAAS,CAAEC,GAAY,IAAI;MAC9D,KAAK,MAAMC,KAAK,IAAID,GAAG,EAAE;QACvB,MAAME,IAAI,GAAU,EAAE;QACtB,MAAMC,aAAa,GAAGF,KAAK,CAACE,aAAa,CAAC,CAAC;QAE3C,KAAK,MAAMC,KAAK,IAAIJ,GAAG,EAAE;UACvB,MAAMK,GAAG,GAAGD,KAAK,CAACE,gBAAgB;UAClC,MAAMC,GAAG,GAAGH,KAAK,CAACI,gBAAgB;UAClCN,IAAI,CAACO,IAAI,CAAC,CAACF,GAAG,EAAEF,GAAG,CAAC,CAAC;;QAGvB,IAAI,CAACX,IAAI,CAACI,GAAG,CAAc,iBAAiBK,aAAa,EAAE,CAAC,CAACJ,SAAS,CAAEW,WAAwB,IAAI;UAClG,MAAMC,KAAK,GAAGD,WAAW,CAACE,UAAU;UACpC,MAAMC,QAAQ,GAAGtB,CAAC,CAACsB,QAAQ,CAACX,IAAI,EAAE;YAAES;UAAK,CAAE,CAAC,CAACG,KAAK,CAACjB,GAAG,CAAC;QACzD,CAAC,CAAC;;IAEN,CAAC,CAAC;EACJ;;AA3BaL,eAAe,C;mBAAfA,eAAe,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAf1B,eAAe,C;SAAfA,eAAe;EAAA2B,OAAA,EAAf3B,eAAe,CAAA4B,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}