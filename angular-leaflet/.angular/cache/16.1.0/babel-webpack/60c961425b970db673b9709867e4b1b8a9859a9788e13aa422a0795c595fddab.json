{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolylineService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/\";\n  }\n  makeRoutePolyline(map) {\n    this.http.get(this.baseURL + 'route').subscribe(routes => {\n      this.http.get(this.baseURL + '/transmitters').subscribe(transmitters => {\n        const path = [];\n        for (const route of routes) {\n          const transmitterId = route.transmitterId;\n          const transmitter = transmitters.find(t => t.id === transmitterId);\n          if (transmitter) {\n            const lon = route.routeSouradniceS;\n            const lat = route.routeSouradniceN;\n            path.push([lat, lon]);\n          }\n        }\n        // Create polyline segments with colors based on transmitter ID\n        for (let i = 0; i < path.length - 1; i++) {\n          const segment = [path[i], path[i + 1]];\n          const transmitterId = routes[i].transmitterId;\n          const color = this.getColorByTransmitterId(transmitterId);\n          L.polyline(segment, {\n            color\n          }).addTo(map);\n        }\n      });\n    });\n  }\n  getColorByTransmitterId(transmitterId) {\n    // Define your color mapping logic based on transmitter ID\n    // For example:\n    if (transmitterId === 1) {\n      return 'red';\n    } else if (transmitterId === 2) {\n      return 'blue';\n    } else if (transmitterId === 3) {\n      return 'green';\n    }\n    // Return a default color if the transmitter ID doesn't match any specific mapping\n    return 'black';\n  }\n}\nPolylineService.ɵfac = function PolylineService_Factory(t) {\n  return new (t || PolylineService)(i0.ɵɵinject(i1.HttpClient));\n};\nPolylineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PolylineService,\n  factory: PolylineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","PolylineService","constructor","http","baseURL","makeRoutePolyline","map","get","subscribe","routes","transmitters","path","route","transmitterId","transmitter","find","t","id","lon","routeSouradniceS","lat","routeSouradniceN","push","i","length","segment","color","getColorByTransmitterId","polyline","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\polyline.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { Transmitter } from 'src/Transmitter';\r\nimport { Route } from 'src/Route';\r\nimport { LatLngExpression } from 'leaflet';\r\nimport { MarkerService } from '../marker.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolylineService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\n\r\nmakeRoutePolyline(map: L.Map): void {\r\n  this.http.get<Route[]>(this.baseURL + 'route').subscribe((routes: Route[]) => {\r\n    this.http.get<Transmitter[]>(this.baseURL + '/transmitters').subscribe((transmitters: Transmitter[]) => {\r\n      const path: L.LatLngTuple[] = [];\r\n\r\n      for (const route of routes) {\r\n        const transmitterId = route.transmitterId;\r\n        const transmitter = transmitters.find(t => t.id === transmitterId);\r\n\r\n        if (transmitter) {\r\n          const lon = route.routeSouradniceS;\r\n          const lat = route.routeSouradniceN;\r\n          path.push([lat, lon]);\r\n        }\r\n      }\r\n\r\n      // Create polyline segments with colors based on transmitter ID\r\n      for (let i = 0; i < path.length - 1; i++) {\r\n        const segment = [path[i], path[i + 1]];\r\n        const transmitterId = routes[i].transmitterId;\r\n        const color = this.getColorByTransmitterId(transmitterId);\r\n        L.polyline(segment, { color }).addTo(map);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\ngetColorByTransmitterId(transmitterId: number): string {\r\n  // Define your color mapping logic based on transmitter ID\r\n  // For example:\r\n  if (transmitterId === 1) {\r\n    return 'red';\r\n  } else if (transmitterId === 2) {\r\n    return 'blue';\r\n  } else if (transmitterId === 3) {\r\n    return 'green';\r\n  }\r\n  // Return a default color if the transmitter ID doesn't match any specific mapping\r\n  return 'black';\r\n}\r\n}"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAS5B,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,yBAAyB;EAE7C;EAGAC,iBAAiBA,CAACC,GAAU;IAC1B,IAAI,CAACH,IAAI,CAACI,GAAG,CAAU,IAAI,CAACH,OAAO,GAAG,OAAO,CAAC,CAACI,SAAS,CAAEC,MAAe,IAAI;MAC3E,IAAI,CAACN,IAAI,CAACI,GAAG,CAAgB,IAAI,CAACH,OAAO,GAAG,eAAe,CAAC,CAACI,SAAS,CAAEE,YAA2B,IAAI;QACrG,MAAMC,IAAI,GAAoB,EAAE;QAEhC,KAAK,MAAMC,KAAK,IAAIH,MAAM,EAAE;UAC1B,MAAMI,aAAa,GAAGD,KAAK,CAACC,aAAa;UACzC,MAAMC,WAAW,GAAGJ,YAAY,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,aAAa,CAAC;UAElE,IAAIC,WAAW,EAAE;YACf,MAAMI,GAAG,GAAGN,KAAK,CAACO,gBAAgB;YAClC,MAAMC,GAAG,GAAGR,KAAK,CAACS,gBAAgB;YAClCV,IAAI,CAACW,IAAI,CAAC,CAACF,GAAG,EAAEF,GAAG,CAAC,CAAC;;;QAIzB;QACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,IAAI,CAACa,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;UACxC,MAAME,OAAO,GAAG,CAACd,IAAI,CAACY,CAAC,CAAC,EAAEZ,IAAI,CAACY,CAAC,GAAG,CAAC,CAAC,CAAC;UACtC,MAAMV,aAAa,GAAGJ,MAAM,CAACc,CAAC,CAAC,CAACV,aAAa;UAC7C,MAAMa,KAAK,GAAG,IAAI,CAACC,uBAAuB,CAACd,aAAa,CAAC;UACzDb,CAAC,CAAC4B,QAAQ,CAACH,OAAO,EAAE;YAAEC;UAAK,CAAE,CAAC,CAACG,KAAK,CAACvB,GAAG,CAAC;;MAE7C,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAqB,uBAAuBA,CAACd,aAAqB;IAC3C;IACA;IACA,IAAIA,aAAa,KAAK,CAAC,EAAE;MACvB,OAAO,KAAK;KACb,MAAM,IAAIA,aAAa,KAAK,CAAC,EAAE;MAC9B,OAAO,MAAM;KACd,MAAM,IAAIA,aAAa,KAAK,CAAC,EAAE;MAC9B,OAAO,OAAO;;IAEhB;IACA,OAAO,OAAO;EAChB;;AA/CaZ,eAAe,C;mBAAfA,eAAe,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfhC,eAAe,C;SAAfA,eAAe;EAAAiC,OAAA,EAAfjC,eAAe,CAAAkC,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}