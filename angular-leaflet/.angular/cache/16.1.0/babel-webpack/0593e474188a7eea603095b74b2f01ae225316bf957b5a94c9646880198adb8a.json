{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolylineService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/route\";\n  }\n  makeRoutePolyline(map) {\n    this.http.get(this.baseURL).subscribe(res => {\n      const transmitterIds = new Set(res.map(route => route.transmitterId));\n      transmitterIds.forEach(transmitterId => {\n        this.http.get(`/transmitters/${transmitterId}`).subscribe(transmitter => {\n          const routesWithTransmitter = res.filter(route => route.transmitterId === transmitterId);\n          const path = routesWithTransmitter.map(route => [route.routeSouradniceN, route.routeSouradniceS]);\n          const color = transmitter.routeColor;\n          const polyline = L.polyline(path, {\n            color: color\n          }).addTo(map);\n        });\n      });\n    });\n  }\n}\nPolylineService.ɵfac = function PolylineService_Factory(t) {\n  return new (t || PolylineService)(i0.ɵɵinject(i1.HttpClient));\n};\nPolylineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PolylineService,\n  factory: PolylineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","PolylineService","constructor","http","baseURL","makeRoutePolyline","map","get","subscribe","res","transmitterIds","Set","route","transmitterId","forEach","transmitter","routesWithTransmitter","filter","path","routeSouradniceN","routeSouradniceS","color","routeColor","polyline","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\polyline.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { Transmitter } from 'src/Transmitter';\r\nimport { Route } from 'src/Route';\r\nimport { LatLngExpression } from 'leaflet';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolylineService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/route\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\n\r\n\r\nmakeRoutePolyline(map: L.Map): void {\r\n  this.http.get<Route[]>(this.baseURL).subscribe((res: Route[]) => {\r\n    const transmitterIds = new Set(res.map((route: Route) => route.transmitterId));\r\n\r\n    transmitterIds.forEach((transmitterId) => {\r\n      this.http.get<Transmitter>(`/transmitters/${transmitterId}`).subscribe((transmitter: Transmitter) => {\r\n        const routesWithTransmitter = res.filter((route: Route) => route.transmitterId === transmitterId);\r\n        const path: LatLngExpression[] = routesWithTransmitter.map((route: Route) => [route.routeSouradniceN, route.routeSouradniceS]);\r\n        const color = transmitter.routeColor;\r\n\r\n        const polyline = L.polyline(path, { color: color }).addTo(map);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n}"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAQ5B,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,8BAA8B;EAElD;EAIAC,iBAAiBA,CAACC,GAAU;IAC1B,IAAI,CAACH,IAAI,CAACI,GAAG,CAAU,IAAI,CAACH,OAAO,CAAC,CAACI,SAAS,CAAEC,GAAY,IAAI;MAC9D,MAAMC,cAAc,GAAG,IAAIC,GAAG,CAACF,GAAG,CAACH,GAAG,CAAEM,KAAY,IAAKA,KAAK,CAACC,aAAa,CAAC,CAAC;MAE9EH,cAAc,CAACI,OAAO,CAAED,aAAa,IAAI;QACvC,IAAI,CAACV,IAAI,CAACI,GAAG,CAAc,iBAAiBM,aAAa,EAAE,CAAC,CAACL,SAAS,CAAEO,WAAwB,IAAI;UAClG,MAAMC,qBAAqB,GAAGP,GAAG,CAACQ,MAAM,CAAEL,KAAY,IAAKA,KAAK,CAACC,aAAa,KAAKA,aAAa,CAAC;UACjG,MAAMK,IAAI,GAAuBF,qBAAqB,CAACV,GAAG,CAAEM,KAAY,IAAK,CAACA,KAAK,CAACO,gBAAgB,EAAEP,KAAK,CAACQ,gBAAgB,CAAC,CAAC;UAC9H,MAAMC,KAAK,GAAGN,WAAW,CAACO,UAAU;UAEpC,MAAMC,QAAQ,GAAGvB,CAAC,CAACuB,QAAQ,CAACL,IAAI,EAAE;YAAEG,KAAK,EAAEA;UAAK,CAAE,CAAC,CAACG,KAAK,CAAClB,GAAG,CAAC;QAChE,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAvBaL,eAAe,C;mBAAfA,eAAe,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAf3B,eAAe,C;SAAfA,eAAe;EAAA4B,OAAA,EAAf5B,eAAe,CAAA6B,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}