{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolylineService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/route\";\n  }\n  makeRoutePolyline(map) {\n    this.http.get(this.baseURL).subscribe(res => {\n      for (const route of res) {\n        const lon = route.routeSouradniceS;\n        const lat = route.routeSouradniceN;\n        const transmitterId = route.transmitterId; // Assuming the foreign key column name is 'transmitterId'\n        this.http.get(`/transmitters/${transmitterId}`).subscribe(transmitter => {\n          const color = transmitter.routeColor;\n          const marker = L.marker([lat, lon], {\n            icon: L.icon({\n              iconUrl: `assets/images/${color}.png`\n            })\n          });\n          marker.addTo(map);\n        });\n      }\n    });\n  }\n}\nPolylineService.ɵfac = function PolylineService_Factory(t) {\n  return new (t || PolylineService)(i0.ɵɵinject(i1.HttpClient));\n};\nPolylineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PolylineService,\n  factory: PolylineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","PolylineService","constructor","http","baseURL","makeRoutePolyline","map","get","subscribe","res","route","lon","routeSouradniceS","lat","routeSouradniceN","transmitterId","transmitter","color","routeColor","marker","icon","iconUrl","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\polyline.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { Transmitter } from 'src/Transmitter';\r\nimport { Route } from 'src/Route';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolylineService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/route\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\n\r\n\r\nmakeRoutePolyline(map: L.Map): void {\r\n  this.http.get<Route[]>(this.baseURL).subscribe((res: Route[]) => {\r\n    for (const route of res) {\r\n      const lon = route.routeSouradniceS;\r\n      const lat = route.routeSouradniceN;\r\n      const transmitterId = route.transmitterId; // Assuming the foreign key column name is 'transmitterId'\r\n\r\n      this.http.get<Transmitter>(`/transmitters/${transmitterId}`).subscribe((transmitter: Transmitter) => {\r\n        const color = transmitter.routeColor;\r\n        const marker = L.marker([lat, lon], { icon: L.icon({ iconUrl: `assets/images/${color}.png` }) });\r\n        marker.addTo(map);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n}"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAO5B,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,8BAA8B;EAElD;EAIAC,iBAAiBA,CAACC,GAAU;IAC1B,IAAI,CAACH,IAAI,CAACI,GAAG,CAAU,IAAI,CAACH,OAAO,CAAC,CAACI,SAAS,CAAEC,GAAY,IAAI;MAC9D,KAAK,MAAMC,KAAK,IAAID,GAAG,EAAE;QACvB,MAAME,GAAG,GAAGD,KAAK,CAACE,gBAAgB;QAClC,MAAMC,GAAG,GAAGH,KAAK,CAACI,gBAAgB;QAClC,MAAMC,aAAa,GAAGL,KAAK,CAACK,aAAa,CAAC,CAAC;QAE3C,IAAI,CAACZ,IAAI,CAACI,GAAG,CAAc,iBAAiBQ,aAAa,EAAE,CAAC,CAACP,SAAS,CAAEQ,WAAwB,IAAI;UAClG,MAAMC,KAAK,GAAGD,WAAW,CAACE,UAAU;UACpC,MAAMC,MAAM,GAAGnB,CAAC,CAACmB,MAAM,CAAC,CAACN,GAAG,EAAEF,GAAG,CAAC,EAAE;YAAES,IAAI,EAAEpB,CAAC,CAACoB,IAAI,CAAC;cAAEC,OAAO,EAAE,iBAAiBJ,KAAK;YAAM,CAAE;UAAC,CAAE,CAAC;UAChGE,MAAM,CAACG,KAAK,CAAChB,GAAG,CAAC;QACnB,CAAC,CAAC;;IAEN,CAAC,CAAC;EACJ;;AAvBaL,eAAe,C;mBAAfA,eAAe,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfzB,eAAe,C;SAAfA,eAAe;EAAA0B,OAAA,EAAf1B,eAAe,CAAA2B,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}