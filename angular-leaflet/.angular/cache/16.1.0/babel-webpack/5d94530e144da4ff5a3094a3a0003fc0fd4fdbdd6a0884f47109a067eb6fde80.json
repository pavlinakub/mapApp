{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../marker.service\";\nimport * as i2 from \"./polyline.service\";\nimport * as i3 from \"../circleMarkers.service\";\nexport class ControllerService {\n  constructor(markerService, polylineService, circleMarkerService) {\n    this.markerService = markerService;\n    this.polylineService = polylineService;\n    this.circleMarkerService = circleMarkerService;\n  }\n  createControlPanel(map) {\n    const layerControl = L.control.layers(undefined, undefined, {\n      collapsed: false\n    }).addTo(map);\n    var data;\n    const markers = this.markerService.makeTransmitterMarkers(map);\n    const polyline = this.polylineService.makeRoutePolyline(map);\n    //const routeMarkers=this.clickService.makeRouteMarkers(map);\n    const circleMarkers = this.circleMarkerService.makeRouteCircleMarkers(map);\n    layerControl.addOverlay(markers, \"Vysilace\");\n    layerControl.addOverlay(polyline, \"Dosah signalu\");\n    layerControl.addOverlay(circleMarkers, \"Sila prijimaneho signalu na trase\");\n    if (data.rssi > -75 && data.rssi > -45) {\n      layerControl.addBaseLayer(circleMarkers, \"Kvalitní signál\");\n    }\n    if (data.rssi < -75 && data.rssi > -85) {\n      layerControl.addBaseLayer(circleMarkers, \"Dobrý signál\");\n    }\n    if (data.rssi < -85 && data.rssi > -95) {\n      layerControl.addBaseLayer(circleMarkers, \"Špatný signál\");\n    }\n    if (data.rssi < -95) {\n      layerControl.addBaseLayer(circleMarkers, \"Ropad spojení\");\n    }\n    markers.addTo(map);\n    polyline.addTo(map);\n    circleMarkers.addTo(map);\n    // Add additional layers or controls if needed\n  }\n}\n\nControllerService.ɵfac = function ControllerService_Factory(t) {\n  return new (t || ControllerService)(i0.ɵɵinject(i1.MarkerService), i0.ɵɵinject(i2.PolylineService), i0.ɵɵinject(i3.CircleMarkerService));\n};\nControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ControllerService,\n  factory: ControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","ControllerService","constructor","markerService","polylineService","circleMarkerService","createControlPanel","map","layerControl","control","layers","undefined","collapsed","addTo","data","markers","makeTransmitterMarkers","polyline","makeRoutePolyline","circleMarkers","makeRouteCircleMarkers","addOverlay","rssi","addBaseLayer","i0","ɵɵinject","i1","MarkerService","i2","PolylineService","i3","CircleMarkerService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\controler.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MarkerService } from '../marker.service';\r\nimport { PolylineService } from './polyline.service';\r\nimport * as L from 'leaflet';\r\nimport { CircleMarkerService } from '../circleMarkers.service';\r\nimport { AllData } from 'src/AllData';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ControllerService {\r\n  constructor(\r\n    private markerService: MarkerService,\r\n    private polylineService: PolylineService,\r\n    private circleMarkerService:CircleMarkerService\r\n  ) {}\r\n\r\n  createControlPanel(map: L.Map): void {\r\n    const layerControl = L.control.layers(undefined, undefined, { collapsed: false }).addTo(map);\r\n    var data!:AllData;\r\n    const markers = this.markerService.makeTransmitterMarkers(map);\r\n    const polyline = this.polylineService.makeRoutePolyline(map);\r\n    //const routeMarkers=this.clickService.makeRouteMarkers(map);\r\n    const circleMarkers=this.circleMarkerService.makeRouteCircleMarkers(map);\r\n    \r\n    layerControl.addOverlay(markers, \"Vysilace\");\r\n    layerControl.addOverlay(polyline, \"Dosah signalu\");\r\n    layerControl.addOverlay(circleMarkers,\"Sila prijimaneho signalu na trase\")\r\n    if (data.rssi>-75 && data.rssi>-45){      \r\n     layerControl.addBaseLayer(circleMarkers,\"Kvalitní signál\");\r\n   }\r\n   if(data.rssi<-75 && data.rssi>-85){\r\n    layerControl.addBaseLayer(circleMarkers,\"Dobrý signál\");}\r\n    if(data.rssi<-85 && data.rssi>-95){\r\n      layerControl.addBaseLayer(circleMarkers,\"Špatný signál\");} \r\n     if(data.rssi<-95 ){\r\n      layerControl.addBaseLayer(circleMarkers,\"Ropad spojení\");}\r\n\r\n\r\n    markers.addTo(map);\r\n    polyline.addTo(map);\r\n    circleMarkers.addTo(map);\r\n\r\n    // Add additional layers or controls if needed\r\n  }\r\n}\r\n"],"mappings":"AAGA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;;;AAO5B,OAAM,MAAOC,iBAAiB;EAC5BC,YACUC,aAA4B,EAC5BC,eAAgC,EAChCC,mBAAuC;IAFvC,KAAAF,aAAa,GAAbA,aAAa;IACb,KAAAC,eAAe,GAAfA,eAAe;IACf,KAAAC,mBAAmB,GAAnBA,mBAAmB;EAC1B;EAEHC,kBAAkBA,CAACC,GAAU;IAC3B,MAAMC,YAAY,GAAGR,CAAC,CAACS,OAAO,CAACC,MAAM,CAACC,SAAS,EAAEA,SAAS,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAE,CAAC,CAACC,KAAK,CAACN,GAAG,CAAC;IAC5F,IAAIO,IAAa;IACjB,MAAMC,OAAO,GAAG,IAAI,CAACZ,aAAa,CAACa,sBAAsB,CAACT,GAAG,CAAC;IAC9D,MAAMU,QAAQ,GAAG,IAAI,CAACb,eAAe,CAACc,iBAAiB,CAACX,GAAG,CAAC;IAC5D;IACA,MAAMY,aAAa,GAAC,IAAI,CAACd,mBAAmB,CAACe,sBAAsB,CAACb,GAAG,CAAC;IAExEC,YAAY,CAACa,UAAU,CAACN,OAAO,EAAE,UAAU,CAAC;IAC5CP,YAAY,CAACa,UAAU,CAACJ,QAAQ,EAAE,eAAe,CAAC;IAClDT,YAAY,CAACa,UAAU,CAACF,aAAa,EAAC,mCAAmC,CAAC;IAC1E,IAAIL,IAAI,CAACQ,IAAI,GAAC,CAAC,EAAE,IAAIR,IAAI,CAACQ,IAAI,GAAC,CAAC,EAAE,EAAC;MAClCd,YAAY,CAACe,YAAY,CAACJ,aAAa,EAAC,iBAAiB,CAAC;;IAE5D,IAAGL,IAAI,CAACQ,IAAI,GAAC,CAAC,EAAE,IAAIR,IAAI,CAACQ,IAAI,GAAC,CAAC,EAAE,EAAC;MACjCd,YAAY,CAACe,YAAY,CAACJ,aAAa,EAAC,cAAc,CAAC;;IACvD,IAAGL,IAAI,CAACQ,IAAI,GAAC,CAAC,EAAE,IAAIR,IAAI,CAACQ,IAAI,GAAC,CAAC,EAAE,EAAC;MAChCd,YAAY,CAACe,YAAY,CAACJ,aAAa,EAAC,eAAe,CAAC;;IACzD,IAAGL,IAAI,CAACQ,IAAI,GAAC,CAAC,EAAE,EAAE;MACjBd,YAAY,CAACe,YAAY,CAACJ,aAAa,EAAC,eAAe,CAAC;;IAG1DJ,OAAO,CAACF,KAAK,CAACN,GAAG,CAAC;IAClBU,QAAQ,CAACJ,KAAK,CAACN,GAAG,CAAC;IACnBY,aAAa,CAACN,KAAK,CAACN,GAAG,CAAC;IAExB;EACF;;;AAlCWN,iBAAiB,C;mBAAjBA,iBAAiB,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,eAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,mBAAA;AAAA;AAAjB9B,iBAAiB,C;SAAjBA,iBAAiB;EAAA+B,OAAA,EAAjB/B,iBAAiB,CAAAgC,IAAA;EAAAC,UAAA,EAFhB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}