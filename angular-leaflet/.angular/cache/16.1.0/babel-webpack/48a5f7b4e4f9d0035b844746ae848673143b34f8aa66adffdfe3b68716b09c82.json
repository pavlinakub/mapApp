{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolylineService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/route\";\n  }\n  makeRoutePolyline(map) {\n    let path = [];\n    let colorR;\n    // Dotaz na tabulku 'route'\n    this.http.get('http://localhost:11111/route').subscribe(routes => {\n      // Dotaz na tabulku 'transmitters'\n      this.http.get('http://localhost:11111/transmitters').subscribe(transmitters => {\n        for (const route of routes) {\n          const transmitterId = route.transmitterId;\n          const transmitter = transmitters.find(t => t.id === transmitterId);\n          if (transmitter) {\n            const lon = route.routeSouradniceS;\n            const lat = route.routeSouradniceN;\n            colorR = transmitter.routeColor;\n            path.push([[lat, lon], {\n              color: colorR\n            }]);\n          }\n        }\n        // Vytvoření polyline s barvou\n        const polyline = L.polyline(path).addTo(map);\n      });\n    });\n  }\n}\nPolylineService.ɵfac = function PolylineService_Factory(t) {\n  return new (t || PolylineService)(i0.ɵɵinject(i1.HttpClient));\n};\nPolylineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PolylineService,\n  factory: PolylineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","PolylineService","constructor","http","baseURL","makeRoutePolyline","map","path","colorR","get","subscribe","routes","transmitters","route","transmitterId","transmitter","find","t","id","lon","routeSouradniceS","lat","routeSouradniceN","routeColor","push","color","polyline","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\polyline.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { Transmitter } from 'src/Transmitter';\r\nimport { Route } from 'src/Route';\r\nimport { LatLngExpression } from 'leaflet';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolylineService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/route\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\nmakeRoutePolyline(map: L.Map): void {\r\n  let path: any[] = [];\r\n  let colorR: any;\r\n\r\n  // Dotaz na tabulku 'route'\r\n  this.http.get<Route[]>('http://localhost:11111/route').subscribe((routes: Route[]) => {\r\n    // Dotaz na tabulku 'transmitters'\r\n    this.http.get<Transmitter[]>('http://localhost:11111/transmitters').subscribe((transmitters: Transmitter[]) => {\r\n      for (const route of routes) {\r\n        const transmitterId = route.transmitterId;\r\n        const transmitter = transmitters.find(t => t.id === transmitterId);\r\n\r\n        if (transmitter) {\r\n          const lon = route.routeSouradniceS;\r\n          const lat = route.routeSouradniceN;\r\n          colorR = transmitter.routeColor;\r\n\r\n          path.push([[lat, lon], { color: colorR }]);\r\n        }\r\n      }\r\n\r\n      // Vytvoření polyline s barvou\r\n      const polyline = L.polyline(path).addTo(map);\r\n    });\r\n  });\r\n}\r\n}"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAQ5B,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,8BAA8B;EAElD;EAEAC,iBAAiBA,CAACC,GAAU;IAC1B,IAAIC,IAAI,GAAU,EAAE;IACpB,IAAIC,MAAW;IAEf;IACA,IAAI,CAACL,IAAI,CAACM,GAAG,CAAU,8BAA8B,CAAC,CAACC,SAAS,CAAEC,MAAe,IAAI;MACnF;MACA,IAAI,CAACR,IAAI,CAACM,GAAG,CAAgB,qCAAqC,CAAC,CAACC,SAAS,CAAEE,YAA2B,IAAI;QAC5G,KAAK,MAAMC,KAAK,IAAIF,MAAM,EAAE;UAC1B,MAAMG,aAAa,GAAGD,KAAK,CAACC,aAAa;UACzC,MAAMC,WAAW,GAAGH,YAAY,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,aAAa,CAAC;UAElE,IAAIC,WAAW,EAAE;YACf,MAAMI,GAAG,GAAGN,KAAK,CAACO,gBAAgB;YAClC,MAAMC,GAAG,GAAGR,KAAK,CAACS,gBAAgB;YAClCd,MAAM,GAAGO,WAAW,CAACQ,UAAU;YAE/BhB,IAAI,CAACiB,IAAI,CAAC,CAAC,CAACH,GAAG,EAAEF,GAAG,CAAC,EAAE;cAAEM,KAAK,EAAEjB;YAAM,CAAE,CAAC,CAAC;;;QAI9C;QACA,MAAMkB,QAAQ,GAAG1B,CAAC,CAAC0B,QAAQ,CAACnB,IAAI,CAAC,CAACoB,KAAK,CAACrB,GAAG,CAAC;MAC9C,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAhCaL,eAAe,C;mBAAfA,eAAe,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAf9B,eAAe,C;SAAfA,eAAe;EAAA+B,OAAA,EAAf/B,eAAe,CAAAgC,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}