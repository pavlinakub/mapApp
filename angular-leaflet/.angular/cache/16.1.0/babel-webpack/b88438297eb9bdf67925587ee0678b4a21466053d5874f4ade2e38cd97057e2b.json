{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolylineService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/route\";\n  }\n  makeRoutePolyline(map) {\n    this.http.get(this.baseURL + '/route').subscribe(routes => {\n      this.http.get(this.baseURL + '/transmitters').subscribe(transmitters => {\n        const path = [];\n        const colors = [];\n        for (const route of routes) {\n          const transmitterId = route.transmitterId;\n          const transmitter = transmitters.find(t => t.id === transmitterId);\n          if (transmitter) {\n            const lon = route.routeSouradniceS;\n            const lat = route.routeSouradniceN;\n            path.push([lat, lon]);\n            colors.push(transmitter.routeColor);\n          }\n        }\n        // Create polyline segments with corresponding colors\n        for (let i = 0; i < path.length - 1; i++) {\n          const segment = [path[i], path[i + 1]];\n          const color = colors[i] || 'red'; // Use red as default color if no color is found\n          L.polyline(segment, {\n            color\n          }).addTo(map);\n        }\n      });\n    });\n  }\n}\nPolylineService.ɵfac = function PolylineService_Factory(t) {\n  return new (t || PolylineService)(i0.ɵɵinject(i1.HttpClient));\n};\nPolylineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PolylineService,\n  factory: PolylineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","PolylineService","constructor","http","baseURL","makeRoutePolyline","map","get","subscribe","routes","transmitters","path","colors","route","transmitterId","transmitter","find","t","id","lon","routeSouradniceS","lat","routeSouradniceN","push","routeColor","i","length","segment","color","polyline","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\polyline.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { Transmitter } from 'src/Transmitter';\r\nimport { Route } from 'src/Route';\r\nimport { LatLngExpression } from 'leaflet';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolylineService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/route\";\r\n  constructor(private http: HttpClient) {\r\n}\r\nmakeRoutePolyline(map: L.Map): void {\r\n  this.http.get<Route[]>(this.baseURL + '/route').subscribe((routes: Route[]) => {\r\n    this.http.get<Transmitter[]>(this.baseURL + '/transmitters').subscribe((transmitters: Transmitter[]) => {\r\n      const path: L.LatLngTuple[] = [];\r\n      const colors: string[] = [];\r\n\r\n      for (const route of routes) {\r\n        const transmitterId = route.transmitterId;\r\n        const transmitter = transmitters.find(t => t.id === transmitterId);\r\n\r\n        if (transmitter) {\r\n          const lon = route.routeSouradniceS;\r\n          const lat = route.routeSouradniceN;\r\n          path.push([lat, lon]);\r\n          colors.push(transmitter.routeColor);\r\n        }\r\n      }\r\n\r\n      // Create polyline segments with corresponding colors\r\n      for (let i = 0; i < path.length - 1; i++) {\r\n        const segment = [path[i], path[i + 1]];\r\n        const color = colors[i] || 'red'; // Use red as default color if no color is found\r\n        L.polyline(segment, { color }).addTo(map);\r\n      }\r\n    });\r\n  });\r\n}\r\n}"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAQ5B,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,8BAA8B;EAElD;EACAC,iBAAiBA,CAACC,GAAU;IAC1B,IAAI,CAACH,IAAI,CAACI,GAAG,CAAU,IAAI,CAACH,OAAO,GAAG,QAAQ,CAAC,CAACI,SAAS,CAAEC,MAAe,IAAI;MAC5E,IAAI,CAACN,IAAI,CAACI,GAAG,CAAgB,IAAI,CAACH,OAAO,GAAG,eAAe,CAAC,CAACI,SAAS,CAAEE,YAA2B,IAAI;QACrG,MAAMC,IAAI,GAAoB,EAAE;QAChC,MAAMC,MAAM,GAAa,EAAE;QAE3B,KAAK,MAAMC,KAAK,IAAIJ,MAAM,EAAE;UAC1B,MAAMK,aAAa,GAAGD,KAAK,CAACC,aAAa;UACzC,MAAMC,WAAW,GAAGL,YAAY,CAACM,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,aAAa,CAAC;UAElE,IAAIC,WAAW,EAAE;YACf,MAAMI,GAAG,GAAGN,KAAK,CAACO,gBAAgB;YAClC,MAAMC,GAAG,GAAGR,KAAK,CAACS,gBAAgB;YAClCX,IAAI,CAACY,IAAI,CAAC,CAACF,GAAG,EAAEF,GAAG,CAAC,CAAC;YACrBP,MAAM,CAACW,IAAI,CAACR,WAAW,CAACS,UAAU,CAAC;;;QAIvC;QACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,IAAI,CAACe,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;UACxC,MAAME,OAAO,GAAG,CAAChB,IAAI,CAACc,CAAC,CAAC,EAAEd,IAAI,CAACc,CAAC,GAAG,CAAC,CAAC,CAAC;UACtC,MAAMG,KAAK,GAAGhB,MAAM,CAACa,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC;UAClCzB,CAAC,CAAC6B,QAAQ,CAACF,OAAO,EAAE;YAAEC;UAAK,CAAE,CAAC,CAACE,KAAK,CAACxB,GAAG,CAAC;;MAE7C,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAhCaL,eAAe,C;mBAAfA,eAAe,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfjC,eAAe,C;SAAfA,eAAe;EAAAkC,OAAA,EAAflC,eAAe,CAAAmC,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}