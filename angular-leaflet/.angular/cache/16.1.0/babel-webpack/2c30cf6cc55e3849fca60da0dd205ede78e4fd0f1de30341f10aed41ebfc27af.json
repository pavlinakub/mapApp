{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MarkerService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/transmitter\";\n  }\n  makeTransmitterMarkers(map) {\n    const layer = L.layerGroup();\n    this.http.get(this.baseURL).subscribe(res => {\n      for (const t of res) {\n        const lon = t.souradniceS;\n        const lat = t.souradniceN;\n        const popupContent = t.name;\n        const imagePath = t.imagePath;\n        const customIcon = L.icon({\n          iconUrl: imagePath,\n          iconSize: [32, 32],\n          iconAnchor: [16, 32]\n        });\n        const marker = L.marker([lat, lon], {\n          icon: customIcon\n        });\n        marker.bindPopup(popupContent).addTo(layer);\n      }\n      return layer;\n    });\n    return layer;\n  }\n}\nMarkerService.ɵfac = function MarkerService_Factory(t) {\n  return new (t || MarkerService)(i0.ɵɵinject(i1.HttpClient));\n};\nMarkerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MarkerService,\n  factory: MarkerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","MarkerService","constructor","http","baseURL","makeTransmitterMarkers","map","layer","layerGroup","get","subscribe","res","t","lon","souradniceS","lat","souradniceN","popupContent","name","imagePath","customIcon","icon","iconUrl","iconSize","iconAnchor","marker","bindPopup","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\mapApp\\angular-leaflet\\src\\app\\map\\marker.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as L from 'leaflet';\nimport { Transmitter } from 'src/model/Transmitter';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MarkerService {\n\n \n  private baseURL = \"http://localhost:11111/transmitter\";\n\n \n  constructor(private http: HttpClient) {\n  }\n \n \n\n makeTransmitterMarkers(map: L.Map): L.LayerGroup {\n  const layer = L.layerGroup();\n\n  this.http.get<Transmitter[]>(this.baseURL).subscribe((res: Transmitter[]) => {\n    for (const t of res) {\n      const lon = t.souradniceS;\n      const lat = t.souradniceN;\n      const popupContent = t.name;\n      const imagePath = t.imagePath;\n\n      const customIcon = L.icon({\n        iconUrl: imagePath,\n        iconSize: [32, 32],\n        iconAnchor: [16, 32]\n      });\n\n      const marker = L.marker([lat, lon], { icon: customIcon });\n      marker.bindPopup(popupContent).addTo(layer);\n   \n    }\n\n\n    return layer;\n  });\n\n\n  return layer;\n}\n}\n\n\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAQ5B,OAAM,MAAOC,aAAa;EAMxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,oCAAoC;EAItD;EAIDC,sBAAsBA,CAACC,GAAU;IAChC,MAAMC,KAAK,GAAGP,CAAC,CAACQ,UAAU,EAAE;IAE5B,IAAI,CAACL,IAAI,CAACM,GAAG,CAAgB,IAAI,CAACL,OAAO,CAAC,CAACM,SAAS,CAAEC,GAAkB,IAAI;MAC1E,KAAK,MAAMC,CAAC,IAAID,GAAG,EAAE;QACnB,MAAME,GAAG,GAAGD,CAAC,CAACE,WAAW;QACzB,MAAMC,GAAG,GAAGH,CAAC,CAACI,WAAW;QACzB,MAAMC,YAAY,GAAGL,CAAC,CAACM,IAAI;QAC3B,MAAMC,SAAS,GAAGP,CAAC,CAACO,SAAS;QAE7B,MAAMC,UAAU,GAAGpB,CAAC,CAACqB,IAAI,CAAC;UACxBC,OAAO,EAAEH,SAAS;UAClBI,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;UAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;SACpB,CAAC;QAEF,MAAMC,MAAM,GAAGzB,CAAC,CAACyB,MAAM,CAAC,CAACV,GAAG,EAAEF,GAAG,CAAC,EAAE;UAAEQ,IAAI,EAAED;QAAU,CAAE,CAAC;QACzDK,MAAM,CAACC,SAAS,CAACT,YAAY,CAAC,CAACU,KAAK,CAACpB,KAAK,CAAC;;MAK7C,OAAOA,KAAK;IACd,CAAC,CAAC;IAGF,OAAOA,KAAK;EACd;;AAtCaN,aAAa,C;mBAAbA,aAAa,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAb9B,aAAa,C;SAAbA,aAAa;EAAA+B,OAAA,EAAb/B,aAAa,CAAAgC,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}