{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CircleMarkerService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/data\";\n  }\n  makeRouteCircleMarkersGreen(map) {\n    const layer = L.layerGroup(); // Create a layer group to hold the polylines\n    this.http.get(this.baseURL).subscribe(allData => {\n      const circleMarker = [];\n      for (const d of allData) {\n        if (d.rssi > -75 && d.rssi > -45) {\n          const lon = d.routeSouradniceS;\n          const lat = d.routeSouradniceN;\n          const popupContent = d.rssi.toString() + \"dBm\";\n          const circle = L.circleMarker([lat, lon]);\n          circle.setStyle({\n            fillColor: \"#2AAD27\"\n          });\n          circle.bindPopup(popupContent).addTo(layer);\n        }\n      }\n      return layer;\n    });\n    return layer;\n  }\n  makeRouteCircleMarkersOrange(map) {\n    const layer = L.layerGroup();\n    this.http.get(this.baseURL).subscribe(allData => {\n      const circleMarker = [];\n      for (const d of allData) {\n        if (d.rssi < -75 && d.rssi > -85) {\n          const lon = d.routeSouradniceS;\n          const lat = d.routeSouradniceN;\n          const popupContent = d.rssi.toString() + \"dBm\";\n          const circle = L.circleMarker([lat, lon]);\n          circle.setStyle({\n            color: \"#CB8427\"\n          });\n          circle.bindPopup(popupContent).addTo(layer);\n        }\n      }\n      return layer;\n    });\n    return layer;\n  }\n  makeRouteCircleMarkersRed(map) {\n    const layer = L.layerGroup();\n    this.http.get(this.baseURL).subscribe(allData => {\n      const circleMarker = [];\n      for (const d of allData) {\n        if (d.rssi < -85 && d.rssi > -95) {\n          const lon = d.routeSouradniceS;\n          const lat = d.routeSouradniceN;\n          const popupContent = d.rssi.toString() + \"dBm\";\n          const circle = L.circleMarker([lat, lon]);\n          circle.setStyle({\n            color: \"red\"\n          });\n          circle.bindPopup(popupContent).addTo(layer);\n        }\n      }\n      return layer;\n    });\n    return layer;\n  }\n  makeRouteCircleMarkersBlack(map) {\n    const layer = L.layerGroup();\n    this.http.get(this.baseURL).subscribe(allData => {\n      const circleMarker = [];\n      for (const d of allData) {\n        if (d.rssi < -95) {\n          const lon = d.routeSouradniceS;\n          const lat = d.routeSouradniceN;\n          const popupContent = d.rssi.toString() + \"dBm\";\n          const circle = L.circleMarker([lat, lon]);\n          circle.setStyle({\n            color: \"black\"\n          });\n          circle.bindPopup(popupContent).addTo(layer);\n        }\n      }\n    });\n    return layer;\n  }\n}\nCircleMarkerService.ɵfac = function CircleMarkerService_Factory(t) {\n  return new (t || CircleMarkerService)(i0.ɵɵinject(i1.HttpClient));\n};\nCircleMarkerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CircleMarkerService,\n  factory: CircleMarkerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","CircleMarkerService","constructor","http","baseURL","makeRouteCircleMarkersGreen","map","layer","layerGroup","get","subscribe","allData","circleMarker","d","rssi","lon","routeSouradniceS","lat","routeSouradniceN","popupContent","toString","circle","setStyle","fillColor","bindPopup","addTo","makeRouteCircleMarkersOrange","color","makeRouteCircleMarkersRed","makeRouteCircleMarkersBlack","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\circleMarkers.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { AllData } from 'src/AllData';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CircleMarkerService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/data\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\nmakeRouteCircleMarkersGreen(map: L.Map): L.LayerGroup {\r\n  const layer = L.layerGroup(); // Create a layer group to hold the polylines\r\n  \r\n  this.http.get<AllData[]>(this.baseURL).subscribe((allData: AllData[]) => {\r\n      const circleMarker: L.LatLngTuple[] = [];\r\n      for (const d of allData) {\r\n        if (d.rssi>-75 && d.rssi>-45){\r\n          const lon = d.routeSouradniceS;\r\n          const lat = d.routeSouradniceN;\r\n          const popupContent=d.rssi.toString()+\"dBm\";\r\n          const circle=L.circleMarker([lat,lon]);\r\n         circle.setStyle({fillColor: \"#2AAD27\"});\r\n          circle.bindPopup(popupContent).addTo(layer);\r\n        }\r\n      }\r\n      return layer;\r\n    });\r\n \r\n\r\n  \r\n  return layer;\r\n}\r\nmakeRouteCircleMarkersOrange(map: L.Map): L.LayerGroup {\r\n  const layer = L.layerGroup();\r\n  \r\n  this.http.get<AllData[]>(this.baseURL).subscribe((allData: AllData[]) => {\r\n      const circleMarker: L.LatLngTuple[] = [];\r\n      for (const d of allData) {\r\n        if(d.rssi<-75 && d.rssi>-85){\r\n          const lon = d.routeSouradniceS;\r\n          const lat = d.routeSouradniceN;\r\n          const popupContent=d.rssi.toString()+\"dBm\";\r\n          const circle=L.circleMarker([lat,lon]);\r\n         \r\n         \r\n           circle.setStyle({color: \"#CB8427\"});\r\n          \r\n\r\n              circle.bindPopup(popupContent).addTo(layer)}\r\n        \r\n      }\r\n      return layer;\r\n    });\r\n \r\n\r\n  \r\n  return layer;\r\n}\r\nmakeRouteCircleMarkersRed(map: L.Map): L.LayerGroup {\r\n  const layer = L.layerGroup(); \r\n  \r\n  this.http.get<AllData[]>(this.baseURL).subscribe((allData: AllData[]) => {\r\n      const circleMarker: L.LatLngTuple[] = [];\r\n      for (const d of allData) {\r\n        if(d.rssi<-85 && d.rssi>-95){\r\n          const lon = d.routeSouradniceS;\r\n          const lat = d.routeSouradniceN;\r\n          const popupContent=d.rssi.toString()+\"dBm\";\r\n          const circle=L.circleMarker([lat,lon]);        \r\n          circle.setStyle({color: \"red\"});\r\n          circle.bindPopup(popupContent).addTo(layer);\r\n        }\r\n      }\r\n      return layer;\r\n    });\r\n \r\n\r\n  \r\n  return layer;\r\n}\r\nmakeRouteCircleMarkersBlack(map: L.Map): L.LayerGroup {\r\n  const layer = L.layerGroup();\r\n  \r\n  this.http.get<AllData[]>(this.baseURL).subscribe((allData: AllData[]) => {\r\n      const circleMarker: L.LatLngTuple[] = [];\r\n      for (const d of allData) {\r\n        if(d.rssi<-95 ){\r\n          const lon = d.routeSouradniceS;\r\n          const lat = d.routeSouradniceN;\r\n          const popupContent=d.rssi.toString()+\"dBm\";\r\n          const circle=L.circleMarker([lat,lon]);\r\n          circle.setStyle({ color: \"black\"});\r\n          circle.bindPopup(popupContent).addTo(layer);  }\r\n      }\r\n    });\r\n  return layer;\r\n}\r\n}\r\n\r\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAM5B,OAAM,MAAOC,mBAAmB;EAI9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,6BAA6B;EAEjD;EAEAC,2BAA2BA,CAACC,GAAU;IACpC,MAAMC,KAAK,GAAGP,CAAC,CAACQ,UAAU,EAAE,CAAC,CAAC;IAE9B,IAAI,CAACL,IAAI,CAACM,GAAG,CAAY,IAAI,CAACL,OAAO,CAAC,CAACM,SAAS,CAAEC,OAAkB,IAAI;MACpE,MAAMC,YAAY,GAAoB,EAAE;MACxC,KAAK,MAAMC,CAAC,IAAIF,OAAO,EAAE;QACvB,IAAIE,CAAC,CAACC,IAAI,GAAC,CAAC,EAAE,IAAID,CAAC,CAACC,IAAI,GAAC,CAAC,EAAE,EAAC;UAC3B,MAAMC,GAAG,GAAGF,CAAC,CAACG,gBAAgB;UAC9B,MAAMC,GAAG,GAAGJ,CAAC,CAACK,gBAAgB;UAC9B,MAAMC,YAAY,GAACN,CAAC,CAACC,IAAI,CAACM,QAAQ,EAAE,GAAC,KAAK;UAC1C,MAAMC,MAAM,GAACrB,CAAC,CAACY,YAAY,CAAC,CAACK,GAAG,EAACF,GAAG,CAAC,CAAC;UACvCM,MAAM,CAACC,QAAQ,CAAC;YAACC,SAAS,EAAE;UAAS,CAAC,CAAC;UACtCF,MAAM,CAACG,SAAS,CAACL,YAAY,CAAC,CAACM,KAAK,CAAClB,KAAK,CAAC;;;MAG/C,OAAOA,KAAK;IACd,CAAC,CAAC;IAIJ,OAAOA,KAAK;EACd;EACAmB,4BAA4BA,CAACpB,GAAU;IACrC,MAAMC,KAAK,GAAGP,CAAC,CAACQ,UAAU,EAAE;IAE5B,IAAI,CAACL,IAAI,CAACM,GAAG,CAAY,IAAI,CAACL,OAAO,CAAC,CAACM,SAAS,CAAEC,OAAkB,IAAI;MACpE,MAAMC,YAAY,GAAoB,EAAE;MACxC,KAAK,MAAMC,CAAC,IAAIF,OAAO,EAAE;QACvB,IAAGE,CAAC,CAACC,IAAI,GAAC,CAAC,EAAE,IAAID,CAAC,CAACC,IAAI,GAAC,CAAC,EAAE,EAAC;UAC1B,MAAMC,GAAG,GAAGF,CAAC,CAACG,gBAAgB;UAC9B,MAAMC,GAAG,GAAGJ,CAAC,CAACK,gBAAgB;UAC9B,MAAMC,YAAY,GAACN,CAAC,CAACC,IAAI,CAACM,QAAQ,EAAE,GAAC,KAAK;UAC1C,MAAMC,MAAM,GAACrB,CAAC,CAACY,YAAY,CAAC,CAACK,GAAG,EAACF,GAAG,CAAC,CAAC;UAGrCM,MAAM,CAACC,QAAQ,CAAC;YAACK,KAAK,EAAE;UAAS,CAAC,CAAC;UAGhCN,MAAM,CAACG,SAAS,CAACL,YAAY,CAAC,CAACM,KAAK,CAAClB,KAAK,CAAC;;;MAGnD,OAAOA,KAAK;IACd,CAAC,CAAC;IAIJ,OAAOA,KAAK;EACd;EACAqB,yBAAyBA,CAACtB,GAAU;IAClC,MAAMC,KAAK,GAAGP,CAAC,CAACQ,UAAU,EAAE;IAE5B,IAAI,CAACL,IAAI,CAACM,GAAG,CAAY,IAAI,CAACL,OAAO,CAAC,CAACM,SAAS,CAAEC,OAAkB,IAAI;MACpE,MAAMC,YAAY,GAAoB,EAAE;MACxC,KAAK,MAAMC,CAAC,IAAIF,OAAO,EAAE;QACvB,IAAGE,CAAC,CAACC,IAAI,GAAC,CAAC,EAAE,IAAID,CAAC,CAACC,IAAI,GAAC,CAAC,EAAE,EAAC;UAC1B,MAAMC,GAAG,GAAGF,CAAC,CAACG,gBAAgB;UAC9B,MAAMC,GAAG,GAAGJ,CAAC,CAACK,gBAAgB;UAC9B,MAAMC,YAAY,GAACN,CAAC,CAACC,IAAI,CAACM,QAAQ,EAAE,GAAC,KAAK;UAC1C,MAAMC,MAAM,GAACrB,CAAC,CAACY,YAAY,CAAC,CAACK,GAAG,EAACF,GAAG,CAAC,CAAC;UACtCM,MAAM,CAACC,QAAQ,CAAC;YAACK,KAAK,EAAE;UAAK,CAAC,CAAC;UAC/BN,MAAM,CAACG,SAAS,CAACL,YAAY,CAAC,CAACM,KAAK,CAAClB,KAAK,CAAC;;;MAG/C,OAAOA,KAAK;IACd,CAAC,CAAC;IAIJ,OAAOA,KAAK;EACd;EACAsB,2BAA2BA,CAACvB,GAAU;IACpC,MAAMC,KAAK,GAAGP,CAAC,CAACQ,UAAU,EAAE;IAE5B,IAAI,CAACL,IAAI,CAACM,GAAG,CAAY,IAAI,CAACL,OAAO,CAAC,CAACM,SAAS,CAAEC,OAAkB,IAAI;MACpE,MAAMC,YAAY,GAAoB,EAAE;MACxC,KAAK,MAAMC,CAAC,IAAIF,OAAO,EAAE;QACvB,IAAGE,CAAC,CAACC,IAAI,GAAC,CAAC,EAAE,EAAE;UACb,MAAMC,GAAG,GAAGF,CAAC,CAACG,gBAAgB;UAC9B,MAAMC,GAAG,GAAGJ,CAAC,CAACK,gBAAgB;UAC9B,MAAMC,YAAY,GAACN,CAAC,CAACC,IAAI,CAACM,QAAQ,EAAE,GAAC,KAAK;UAC1C,MAAMC,MAAM,GAACrB,CAAC,CAACY,YAAY,CAAC,CAACK,GAAG,EAACF,GAAG,CAAC,CAAC;UACtCM,MAAM,CAACC,QAAQ,CAAC;YAAEK,KAAK,EAAE;UAAO,CAAC,CAAC;UAClCN,MAAM,CAACG,SAAS,CAACL,YAAY,CAAC,CAACM,KAAK,CAAClB,KAAK,CAAC;;;IAEjD,CAAC,CAAC;IACJ,OAAOA,KAAK;EACd;;AA7FaN,mBAAmB,C;mBAAnBA,mBAAmB,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnBhC,mBAAmB,C;SAAnBA,mBAAmB;EAAAiC,OAAA,EAAnBjC,mBAAmB,CAAAkC,IAAA;EAAAC,UAAA,EAFhB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}