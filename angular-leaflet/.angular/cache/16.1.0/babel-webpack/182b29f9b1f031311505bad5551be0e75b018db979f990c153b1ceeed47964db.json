{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CircleMarkerService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/data\";\n  }\n  makeRoutePolyline(map) {\n    const layer = L.layerGroup(); // Create a layer group to hold the polylines\n    this.http.get(this.baseURL).subscribe(allData => {\n      const circleMarker = [];\n      for (const d of allData) {\n        const lon = d.routeSouradniceS;\n        const lat = d.routeSouradniceN;\n        const color = d.rColor;\n        const popupContent = d.rssi.toString();\n        const circle = L.circleMarker([lat, lon]);\n        circle.setStyle({\n          fillColor: color\n        });\n        circle.bindPopup(popupContent).addTo(layer);\n      }\n    });\n    return layer;\n  }\n}\nCircleMarkerService.ɵfac = function CircleMarkerService_Factory(t) {\n  return new (t || CircleMarkerService)(i0.ɵɵinject(i1.HttpClient));\n};\nCircleMarkerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CircleMarkerService,\n  factory: CircleMarkerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","CircleMarkerService","constructor","http","baseURL","makeRoutePolyline","map","layer","layerGroup","get","subscribe","allData","circleMarker","d","lon","routeSouradniceS","lat","routeSouradniceN","color","rColor","popupContent","rssi","toString","circle","setStyle","fillColor","bindPopup","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\circleMarkers.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { AllData } from 'src/AllData';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CircleMarkerService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/data\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\n\r\nmakeRoutePolyline(map: L.Map): L.LayerGroup {\r\n  const layer = L.layerGroup(); // Create a layer group to hold the polylines\r\n  \r\n  this.http.get<AllData[]>(this.baseURL).subscribe((allData: AllData[]) => {\r\n      const circleMarker: L.LatLngTuple[] = [];\r\n      for (const d of allData) {\r\n          const lon = d.routeSouradniceS;\r\n          const lat = d.routeSouradniceN;\r\n          const color=d.rColor;\r\n          const popupContent=d.rssi.toString();\r\n           const circle = L.circleMarker([lat, lon]);\r\n           circle.setStyle({fillColor: color});\r\n          circle.bindPopup(popupContent).addTo(layer);\r\n        \r\n      }\r\n    });\r\n \r\n\r\n  \r\n  return layer;\r\n}\r\n}\r\n\r\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAM5B,OAAM,MAAOC,mBAAmB;EAI9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,6BAA6B;EAEjD;EAGAC,iBAAiBA,CAACC,GAAU;IAC1B,MAAMC,KAAK,GAAGP,CAAC,CAACQ,UAAU,EAAE,CAAC,CAAC;IAE9B,IAAI,CAACL,IAAI,CAACM,GAAG,CAAY,IAAI,CAACL,OAAO,CAAC,CAACM,SAAS,CAAEC,OAAkB,IAAI;MACpE,MAAMC,YAAY,GAAoB,EAAE;MACxC,KAAK,MAAMC,CAAC,IAAIF,OAAO,EAAE;QACrB,MAAMG,GAAG,GAAGD,CAAC,CAACE,gBAAgB;QAC9B,MAAMC,GAAG,GAAGH,CAAC,CAACI,gBAAgB;QAC9B,MAAMC,KAAK,GAACL,CAAC,CAACM,MAAM;QACpB,MAAMC,YAAY,GAACP,CAAC,CAACQ,IAAI,CAACC,QAAQ,EAAE;QACnC,MAAMC,MAAM,GAAGvB,CAAC,CAACY,YAAY,CAAC,CAACI,GAAG,EAAEF,GAAG,CAAC,CAAC;QACzCS,MAAM,CAACC,QAAQ,CAAC;UAACC,SAAS,EAAEP;QAAK,CAAC,CAAC;QACpCK,MAAM,CAACG,SAAS,CAACN,YAAY,CAAC,CAACO,KAAK,CAACpB,KAAK,CAAC;;IAGjD,CAAC,CAAC;IAIJ,OAAOA,KAAK;EACd;;AA5BaN,mBAAmB,C;mBAAnBA,mBAAmB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnB9B,mBAAmB,C;SAAnBA,mBAAmB;EAAA+B,OAAA,EAAnB/B,mBAAmB,CAAAgC,IAAA;EAAAC,UAAA,EAFhB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}