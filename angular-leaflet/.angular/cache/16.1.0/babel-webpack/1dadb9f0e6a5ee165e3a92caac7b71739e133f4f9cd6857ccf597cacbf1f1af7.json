{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolylineService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111/transmitters/\";\n  }\n  makeRoutePolyline(map) {\n    this.http.get(this.baseURL).subscribe(res => {\n      const transmitterIds = res.map(route => route.transmitterId);\n      this.http.get(`/transmitters?ids=${transmitterIds.join(',')}`).subscribe(transmitters => {\n        const transmitterMap = new Map();\n        transmitters.forEach(transmitter => {\n          transmitterMap.set(transmitter.id, transmitter);\n        });\n        res.forEach(route => {\n          const lon = route.routeSouradniceS;\n          const lat = route.routeSouradniceN;\n          const transmitterId = route.transmitterId;\n          const transmitter = transmitterMap.get(transmitterId);\n          const color = transmitter?.routeColor || 'red'; // Default color is 'red' if no matching transmitter is found\n          const path = [[lat, lon]];\n          L.polyline(path, {\n            color\n          }).addTo(map);\n        });\n      });\n    });\n  }\n}\nPolylineService.ɵfac = function PolylineService_Factory(t) {\n  return new (t || PolylineService)(i0.ɵɵinject(i1.HttpClient));\n};\nPolylineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PolylineService,\n  factory: PolylineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","PolylineService","constructor","http","baseURL","makeRoutePolyline","map","get","subscribe","res","transmitterIds","route","transmitterId","join","transmitters","transmitterMap","Map","forEach","transmitter","set","id","lon","routeSouradniceS","lat","routeSouradniceN","color","routeColor","path","polyline","addTo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\polyline.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { Transmitter } from 'src/Transmitter';\r\nimport { Route } from 'src/Route';\r\nimport { LatLngExpression } from 'leaflet';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolylineService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111/transmitters/\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\nmakeRoutePolyline(map: L.Map): void {\r\n  this.http.get<Route[]>(this.baseURL).subscribe((res: Route[]) => {\r\n    const transmitterIds = res.map(route => route.transmitterId);\r\n    this.http.get<Transmitter[]>(`/transmitters?ids=${transmitterIds.join(',')}`).subscribe((transmitters: Transmitter[]) => {\r\n      const transmitterMap = new Map<number, Transmitter>();\r\n      transmitters.forEach(transmitter => {\r\n        transmitterMap.set(transmitter.id, transmitter);\r\n      });\r\n\r\n      res.forEach(route => {\r\n        const lon = route.routeSouradniceS;\r\n        const lat = route.routeSouradniceN;\r\n        const transmitterId = route.transmitterId;\r\n\r\n        const transmitter = transmitterMap.get(transmitterId);\r\n        const color = transmitter?.routeColor || 'red'; // Default color is 'red' if no matching transmitter is found\r\n\r\n        const path: LatLngExpression[] = [[lat, lon]];\r\n        L.polyline(path, { color }).addTo(map);\r\n      });\r\n    });\r\n  });\r\n}\r\n}\r\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAQ5B,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,sCAAsC;EAE1D;EAEAC,iBAAiBA,CAACC,GAAU;IAC1B,IAAI,CAACH,IAAI,CAACI,GAAG,CAAU,IAAI,CAACH,OAAO,CAAC,CAACI,SAAS,CAAEC,GAAY,IAAI;MAC9D,MAAMC,cAAc,GAAGD,GAAG,CAACH,GAAG,CAACK,KAAK,IAAIA,KAAK,CAACC,aAAa,CAAC;MAC5D,IAAI,CAACT,IAAI,CAACI,GAAG,CAAgB,qBAAqBG,cAAc,CAACG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAACL,SAAS,CAAEM,YAA2B,IAAI;QACtH,MAAMC,cAAc,GAAG,IAAIC,GAAG,EAAuB;QACrDF,YAAY,CAACG,OAAO,CAACC,WAAW,IAAG;UACjCH,cAAc,CAACI,GAAG,CAACD,WAAW,CAACE,EAAE,EAAEF,WAAW,CAAC;QACjD,CAAC,CAAC;QAEFT,GAAG,CAACQ,OAAO,CAACN,KAAK,IAAG;UAClB,MAAMU,GAAG,GAAGV,KAAK,CAACW,gBAAgB;UAClC,MAAMC,GAAG,GAAGZ,KAAK,CAACa,gBAAgB;UAClC,MAAMZ,aAAa,GAAGD,KAAK,CAACC,aAAa;UAEzC,MAAMM,WAAW,GAAGH,cAAc,CAACR,GAAG,CAACK,aAAa,CAAC;UACrD,MAAMa,KAAK,GAAGP,WAAW,EAAEQ,UAAU,IAAI,KAAK,CAAC,CAAC;UAEhD,MAAMC,IAAI,GAAuB,CAAC,CAACJ,GAAG,EAAEF,GAAG,CAAC,CAAC;UAC7CrB,CAAC,CAAC4B,QAAQ,CAACD,IAAI,EAAE;YAAEF;UAAK,CAAE,CAAC,CAACI,KAAK,CAACvB,GAAG,CAAC;QACxC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AA7BaL,eAAe,C;mBAAfA,eAAe,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfhC,eAAe,C;SAAfA,eAAe;EAAAiC,OAAA,EAAfjC,eAAe,CAAAkC,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}