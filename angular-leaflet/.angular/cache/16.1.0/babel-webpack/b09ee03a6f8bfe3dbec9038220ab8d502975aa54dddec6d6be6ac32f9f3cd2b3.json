{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PolylineService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://localhost:11111\";\n  }\n  makeRoutePolyline(map) {\n    var log;\n    var route;\n    const layer = L.layerGroup(); // Create a layer group to hold the polylines\n    this.http.get(this.baseURL + '/route').subscribe(routes => {\n      this.http.get(this.baseURL + '/transmitters').subscribe(transmitters => {\n        const path = [];\n        for (const route of routes) {\n          const transmitterId = route.transmitterId;\n          const transmitter = transmitters.find(t => t.id === transmitterId);\n          if (transmitter) {\n            const lon = route.routeSouradniceS;\n            const lat = route.routeSouradniceN;\n            path.push([lat, lon]);\n          }\n        }\n        // Create polyline segments with colors based on transmitter ID\n        for (let i = 0; i < path.length - 1; i++) {\n          const segment = [path[i], path[i + 1]];\n          const transmitterId = routes[i].transmitterId;\n          const color = this.getColorByTransmitterId(transmitterId);\n          const polyline = L.polyline(segment, {\n            color\n          });\n          polyline.addTo(layer);\n          // Add click event handler with popup\n          if (route.routTime == log.logTime) polyline.on('click', function (e) {\n            const popupContent = log.rssi.toString(); // Replace with actual information\n            const popup = L.popup().setLatLng(e.latlng).setContent(popupContent);\n            map.openPopup(popup);\n          });\n        }\n      });\n    });\n    // Return the layer group containing the polylines\n    return layer;\n  }\n  getColorByTransmitterId(transmitterId) {\n    // Define your color mapping logic based on transmitter ID\n    // For example:\n    if (transmitterId === 1) {\n      return 'red';\n    } else if (transmitterId === 2) {\n      return 'blue';\n    } else if (transmitterId === 3) {\n      return 'green';\n    }\n    // Return a default color if the transmitter ID doesn't match any specific mapping\n    return 'black';\n  }\n}\nPolylineService.ɵfac = function PolylineService_Factory(t) {\n  return new (t || PolylineService)(i0.ɵɵinject(i1.HttpClient));\n};\nPolylineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PolylineService,\n  factory: PolylineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["L","PolylineService","constructor","http","baseURL","makeRoutePolyline","map","log","route","layer","layerGroup","get","subscribe","routes","transmitters","path","transmitterId","transmitter","find","t","id","lon","routeSouradniceS","lat","routeSouradniceN","push","i","length","segment","color","getColorByTransmitterId","polyline","addTo","routTime","logTime","on","e","popupContent","rssi","toString","popup","setLatLng","latlng","setContent","openPopup","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Honza\\Desktop\\OOP\\projekty\\policieProjekt\\angular-leaflet\\src\\app\\map\\polyline.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as L from 'leaflet';\r\nimport { Transmitter } from 'src/Transmitter';\r\nimport { Route } from 'src/Route';\r\nimport { LatLngExpression } from 'leaflet';\r\nimport { MarkerService } from '../marker.service';\r\nimport { Log } from 'src/Log';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolylineService {\r\n \r\n \r\n  private baseURL = \"http://localhost:11111\";\r\n  constructor(private http: HttpClient) {\r\n}\r\n\r\n\r\nmakeRoutePolyline(map: L.Map): L.LayerGroup {\r\n  var log:Log;\r\n  var route:Route;\r\n  const layer = L.layerGroup(); // Create a layer group to hold the polylines\r\n  this.http.get<Route[]>(this.baseURL + '/route').subscribe((routes: Route[]) => {\r\n    this.http.get<Transmitter[]>(this.baseURL + '/transmitters').subscribe((transmitters: Transmitter[]) => {\r\n      const path: L.LatLngTuple[] = [];\r\n      \r\n      for (const route of routes) {\r\n        const transmitterId = route.transmitterId;\r\n        const transmitter = transmitters.find(t => t.id === transmitterId);\r\n\r\n        if (transmitter) {\r\n          const lon = route.routeSouradniceS;\r\n          const lat = route.routeSouradniceN;\r\n          path.push([lat, lon]);\r\n        }\r\n      }\r\n\r\n      // Create polyline segments with colors based on transmitter ID\r\n      for (let i = 0; i < path.length - 1; i++) {\r\n        const segment = [path[i], path[i + 1]];\r\n        const transmitterId = routes[i].transmitterId;\r\n        const color = this.getColorByTransmitterId(transmitterId);\r\n        const polyline = L.polyline(segment, { color });\r\n        polyline.addTo(layer);\r\n\r\n         // Add click event handler with popup\r\n         if (route.routTime==log.logTime)\r\n         polyline.on('click', function(e) {\r\n          const popupContent = log.rssi.toString(); // Replace with actual information\r\n          const popup = L.popup().setLatLng(e.latlng).setContent(popupContent);\r\n          map.openPopup(popup);\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the layer group containing the polylines\r\n  return layer;\r\n}\r\n\r\ngetColorByTransmitterId(transmitterId: number): string {\r\n  // Define your color mapping logic based on transmitter ID\r\n  // For example:\r\n  if (transmitterId === 1) {\r\n    return 'red';\r\n  } else if (transmitterId === 2) {\r\n    return 'blue';\r\n  } else if (transmitterId === 3) {\r\n    return 'green';\r\n  }\r\n  // Return a default color if the transmitter ID doesn't match any specific mapping\r\n  return 'black';\r\n}\r\n}\r\n"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAU5B,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,wBAAwB;EAE5C;EAGAC,iBAAiBA,CAACC,GAAU;IAC1B,IAAIC,GAAO;IACX,IAAIC,KAAW;IACf,MAAMC,KAAK,GAAGT,CAAC,CAACU,UAAU,EAAE,CAAC,CAAC;IAC9B,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAU,IAAI,CAACP,OAAO,GAAG,QAAQ,CAAC,CAACQ,SAAS,CAAEC,MAAe,IAAI;MAC5E,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAgB,IAAI,CAACP,OAAO,GAAG,eAAe,CAAC,CAACQ,SAAS,CAAEE,YAA2B,IAAI;QACrG,MAAMC,IAAI,GAAoB,EAAE;QAEhC,KAAK,MAAMP,KAAK,IAAIK,MAAM,EAAE;UAC1B,MAAMG,aAAa,GAAGR,KAAK,CAACQ,aAAa;UACzC,MAAMC,WAAW,GAAGH,YAAY,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,aAAa,CAAC;UAElE,IAAIC,WAAW,EAAE;YACf,MAAMI,GAAG,GAAGb,KAAK,CAACc,gBAAgB;YAClC,MAAMC,GAAG,GAAGf,KAAK,CAACgB,gBAAgB;YAClCT,IAAI,CAACU,IAAI,CAAC,CAACF,GAAG,EAAEF,GAAG,CAAC,CAAC;;;QAIzB;QACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,IAAI,CAACY,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;UACxC,MAAME,OAAO,GAAG,CAACb,IAAI,CAACW,CAAC,CAAC,EAAEX,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAAC;UACtC,MAAMV,aAAa,GAAGH,MAAM,CAACa,CAAC,CAAC,CAACV,aAAa;UAC7C,MAAMa,KAAK,GAAG,IAAI,CAACC,uBAAuB,CAACd,aAAa,CAAC;UACzD,MAAMe,QAAQ,GAAG/B,CAAC,CAAC+B,QAAQ,CAACH,OAAO,EAAE;YAAEC;UAAK,CAAE,CAAC;UAC/CE,QAAQ,CAACC,KAAK,CAACvB,KAAK,CAAC;UAEpB;UACA,IAAID,KAAK,CAACyB,QAAQ,IAAE1B,GAAG,CAAC2B,OAAO,EAC/BH,QAAQ,CAACI,EAAE,CAAC,OAAO,EAAE,UAASC,CAAC;YAC9B,MAAMC,YAAY,GAAG9B,GAAG,CAAC+B,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC;YAC1C,MAAMC,KAAK,GAAGxC,CAAC,CAACwC,KAAK,EAAE,CAACC,SAAS,CAACL,CAAC,CAACM,MAAM,CAAC,CAACC,UAAU,CAACN,YAAY,CAAC;YACpE/B,GAAG,CAACsC,SAAS,CAACJ,KAAK,CAAC;UACtB,CAAC,CAAC;;MAEN,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;IACA,OAAO/B,KAAK;EACd;EAEAqB,uBAAuBA,CAACd,aAAqB;IAC3C;IACA;IACA,IAAIA,aAAa,KAAK,CAAC,EAAE;MACvB,OAAO,KAAK;KACb,MAAM,IAAIA,aAAa,KAAK,CAAC,EAAE;MAC9B,OAAO,MAAM;KACd,MAAM,IAAIA,aAAa,KAAK,CAAC,EAAE;MAC9B,OAAO,OAAO;;IAEhB;IACA,OAAO,OAAO;EAChB;;AA9Daf,eAAe,C;mBAAfA,eAAe,EAAA4C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAf/C,eAAe,C;SAAfA,eAAe;EAAAgD,OAAA,EAAfhD,eAAe,CAAAiD,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}